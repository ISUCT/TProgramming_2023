import { Logger } from '../src/logger/logger';
import { Archer } from '../src/heroes/archerHero';
import { Warrior } from '../src/heroes/warriorHero';

const spyConsoleLog = jest.spyOn(console, 'log').mockImplementation(() => {});

describe('Logger tests', () => {
  let heroes;

  beforeEach(() => {
    heroes = [new Archer('Dada'), new Warrior('NetNet')];
  });

  it('start message', () => {
    Logger.startMessage();
    expect(spyConsoleLog).toHaveBeenCalledWith('\x1b[42m–ë–∏—Ç–≤–∞ –Ω–∞—á–∞–ª–∞—Å—å\x1b[0m');
  });

  it('declaration heroes should log hero names', () => {
    Logger.declarationHeroes(heroes);
    expect(spyConsoleLog).toHaveBeenCalledWith('–í –¥–∞–Ω–Ω–æ–º —Å—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–º—É—Ç —É—á–∞—Å—Ç–∏–µ –±–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–µ –∏ –Ω–µ—É–∫—Ä–æ—Ç–∏–º—ã–µ: ');
    expect(spyConsoleLog).toHaveBeenCalledWith('\x1b[4mWarrior NetNet\x1b[0m');
    expect(spyConsoleLog).toHaveBeenCalledWith('\x1b[4mArcher Dada\x1b[0m');
  });
  it('win message', () => {
    Logger.winMassage(heroes[1]);
    expect(spyConsoleLog).toHaveBeenCalledWith(
      expect.stringMatching(
        // eslint-disable-next-line no-control-regex
        /^üëë –í –ñ–ï–°–¢–ö–û–ô –ú–Ø–°–û–†–£–ë–ö–ï –ü–û–ë–ï–î–ò–õ \x1b\[41m\w+\x1b\[0m\. –ò–ú–Ø \x1b\[41m\w+\x1b\[0m –ó–ê–ü–û–ú–ù–Ø–¢ –ù–ê –ú–ù–û–ì–ò–ï –í–ï–ö–ê üëë$/,
      ),
    );
  });
  it('critical attack information', () => {
    Logger.criticalAttack('Warrior', 'Physical');
    expect(spyConsoleLog).toHaveBeenCalledWith(
      'Warrior –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª Retaliatory Strike –∏ –Ω–∞–Ω–æ—Å–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–Ω(10)',
    );
  });
  // Others have to do with random(attack or similar)
});
