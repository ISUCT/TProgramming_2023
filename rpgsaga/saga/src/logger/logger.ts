import { BasicHero } from '../heroes/basicHero';
import { criticalDamage, DamageType } from '../constants/config';

export class Logger {
  static declarationHeroes(heroes: BasicHero[]) {
    console.log('–í –¥–∞–Ω–Ω–æ–º —Å—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–º—É—Ç —É—á–∞—Å—Ç–∏–µ –±–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–µ –∏ –Ω–µ—É–∫—Ä–æ—Ç–∏–º—ã–µ: ');
    heroes.forEach(hero => console.log(`\x1b[4m${hero.heroType} ${hero.name}\x1b[0m`));
  }

  static startMessage() {
    console.log('\x1b[42m–ë–∏—Ç–≤–∞ –Ω–∞—á–∞–ª–∞—Å—å\x1b[0m');
  }

  static endMessage(target: BasicHero, hero: BasicHero) {
    console.log(
      `–î—Ä–∞–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞. \x1b[34m${hero.heroType}\x1b[0m –æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É –Ω–∞–¥ \x1b[35m${target.heroType}\x1b[0m. –£ –Ω–µ–≥–æ –æ—Å—Ç–∞–ª–æ—Å—å \x1b[32;1m${hero.currentHealth}\x1b[0m –∑–¥–æ—Ä–æ–≤—å—è`,
    );
  }

  static winMassage(hero: BasicHero) {
    console.log();
    console.log(
      `üëë –í –ñ–ï–°–¢–ö–û–ô –ú–Ø–°–û–†–£–ë–ö–ï –ü–û–ë–ï–î–ò–õ \x1b[41m${hero.heroType}\x1b[0m. –ò–ú–Ø \x1b[41m${hero.name}\x1b[0m –ó–ê–ü–û–ú–ù–Ø–¢ –ù–ê –ú–ù–û–ì–ò–ï –í–ï–ö–ê üëë`,
    );
  }

  static dealDamage(damageInfo: number, typeAttack: string, typeHero: string, target: BasicHero) {
    if (typeAttack) {
      console.log(
        `–ù–∞–Ω–µ—Å–µ–Ω–æ \x1b[31;1m${damageInfo}\x1b[0m —É—Ä–æ–Ω–∞ —Ç–∏–ø–∞ ${typeAttack} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º \x1b[33m${typeHero}\x1b[0m –ø–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É \x1b[33m${
          target.heroType
        }\x1b[0m. –£ –Ω–µ–≥–æ –æ—Å—Ç–∞–ª–æ—Å—å \x1b[32;1m${target.currentHealth - damageInfo}\x1b[0m –∑–¥–æ—Ä–æ–≤—å—è`,
      );
    } else {
      console.log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É—Ä–æ–Ω–∞: ${typeAttack}`);
    }
  }
  static criticalAttack(typeHero: string, typeAttack: string) {
    const ultInfo = criticalDamage[DamageType[typeAttack]];
    if (typeAttack === DamageType.Physical || typeAttack === DamageType.Shot || typeAttack === DamageType.Electric) {
      console.log(`${typeHero} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª ${ultInfo.ultName} –∏ –Ω–∞–Ω–æ—Å–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–Ω(${ultInfo.damage})`);
    } else if (typeAttack === DamageType.Fire || typeAttack === DamageType.Poison) {
      console.log(`${typeHero} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª ${ultInfo.ultName}, —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –¥–æ–ø. —É—Ä–æ–Ω –∫–∞–∂–¥—ã–π —É–¥–∞—Ä(${ultInfo.damage})`,);
    } else if (typeAttack === DamageType.Ice) {
      console.log(`${typeHero} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª ${ultInfo.ultName} –∏ –∑–∞–º–æ—Ä–æ–∑–∏–ª –ø—Ä–æ—Ç–∏–≤–∏–Ω–∫–∞`);
    }
  }

  static roundCount(count: number) {
    console.log();
    console.log(`---------------------- –†–∞—É–Ω–¥ ${count} ----------------------`);
  }

  static fewHeroes() {
    console.log('–ú–∞–ª–æ –∂–µ–ª–∞—é—â–∏—Ö... –°–ª–∞–±–∞–∫–∞...');
  }
}
